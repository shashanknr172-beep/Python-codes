#Reminder App- CLI
#A simple reminder app that:
#Lets user add reminders with a due time
#Stores them in JSON
#Checks reminders in background
#Sends desktop notifications when due

#Perfect as a real-world automation tool.


import json
import os
import time
import threading
from datetime import datetime, timedelta
from typing import List, Dict
from plyer import notification

STORAGE_FILE = "reminders.json"

# ---------------- Reminder Model ---------------- #
class Reminder:
    def __init__(self, message: str, due_time: str) -> None:
        self.message = message
        self.due_time = due_time  # string format: YYYY-MM-DD HH:MM:SS

    def to_dict(self) -> Dict:
        return {"message": self.message, "due_time": self.due_time}

    @staticmethod
    def from_dict(data: Dict) -> "Reminder":
        return Reminder(data["message"], data["due_time"])

# ---------------- Reminder Manager ---------------- #
class ReminderManager:
    def __init__(self, storage_file: str = STORAGE_FILE) -> None:
        self.storage_file = storage_file
        self.reminders: List[Reminder] = []
        self._load()

    def _load(self) -> None:
        if os.path.exists(self.storage_file):
            with open(self.storage_file, "r") as f:
                data = json.load(f)
                self.reminders = [Reminder.from_dict(r) for r in data]

    def _save(self) -> None:
        with open(self.storage_file, "w") as f:
            json.dump([r.to_dict() for r in self.reminders], f, indent=4)

    def add_reminder(self, message: str, minutes_from_now: int) -> None:
        due_time = (datetime.now() + timedelta(minutes=minutes_from_now)).strftime("%Y-%m-%d %H:%M:%S")
        self.reminders.append(Reminder(message, due_time))
        self._save()
        print(f"✅ Reminder set: '{message}' at {due_time}")

    def list_reminders(self) -> List[Reminder]:
        return self.reminders

    def check_reminders(self) -> None:
        """Continuously check if reminders are due."""
        while True:
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            for r in self.reminders[:]:  # copy to avoid mutation issue
                if now >= r.due_time:
                    notification.notify(
                        title="⏰ Reminder Alert!",
                        message=r.message,
                        timeout=10
                    )
                    print(f"🔔 Reminder triggered: {r.message}")
                    self.reminders.remove(r)
                    self._save()
            time.sleep(5)

# ---------------- CLI ---------------- #
def print_menu() -> None:
    print("\n=== Reminder App ===")
    print("1. Add Reminder")
    print("2. List Reminders")
    print("3. Exit")

def main():
    manager = ReminderManager()

    # Start reminder checker in background thread
    threading.Thread(target=manager.check_reminders, daemon=True).start()

    while True:
        print_menu()
        choice = input("Enter your choice (1-3): ").strip()

        if choice == "1":
            message = input("Enter reminder message: ").strip()
            try:
                minutes = int(input("Enter time (minutes from now): ").strip())
                manager.add_reminder(message, minutes)
            except ValueError:
                print("⚠️ Invalid number of minutes.")

        elif choice == "2":
            reminders = manager.list_reminders()
            if not reminders:
                print("No reminders set.")
            else:
                print("\n--- Upcoming Reminders ---")
                for i
